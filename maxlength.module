<?php

/**
 * @file
 *  Limits the number of characters in textfields and textareas and shows the
 *  amount of characters left.
 */
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\node\NodeTypeInterface;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\WidgetInterface;

define('MAXLENGTH_DEFAULT_JS_LABEL', 'Content limited to @limit characters, remaining: <strong>@remaining</strong>');

/**
 * Implements hook_help().
 */
function maxlength_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.maxlength':
      $output = '<p>' . t('Maxlength creates a new Form Property: #maxlength_js which in conjunction with #maxlength will enforce, via JavaScript, the maxlength of a textfield or textarea and will show the number of characters left.') . '</p>';
      $output .= '<p>' . t('Using the field setting page, you can limit textfields and textareas. For textfields this module will use the "<strong>Maximum length</strong>" value set in the <strong>field settings</strong>.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @todo: Check if all them work.
 * @param $cache
 */
function maxlength_element_info_alter(&$cache) {
  // Add prerender functions to textareas and text fields.
  $cache['textfield']['#pre_render'][] = 'maxlength_pre_render';
  $cache['textarea']['#pre_render'][] = 'maxlength_pre_render';
  $cache['textarea']['#process'][] = 'maxlength_process_element';
  $cache['text_format']['#pre_render'][] = 'maxlength_pre_render';
  $cache['text_format']['#process'][] = 'maxlength_process_element';
}

/**
 * Pre render function to set maxlength attributes.
 */
function maxlength_pre_render($element) {
  if (((isset($element['#attributes']['maxlength']) && $element['#attributes']['maxlength'] > 0)) && isset($element['#maxlength_js']) && $element['#maxlength_js'] === TRUE) {
    $element['#attributes']['class'][] = 'maxlength';
    $element['#attached']['library'][] = 'maxlength/maxlength';
  }
  return $element;
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 *
 * @todo: add the settings in the field schema and also test the edge values,
 * like 0 or negative.
 */
function maxlength_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $plugin_id = $plugin->getPluginId();
  // Depeding on the widget, we may have different settings.
  $widget_settings = \Drupal::service('maxlength.widget_settings');
  $allowed_settings = $widget_settings->getAllowedSettings($plugin_id);
  if (!empty($allowed_settings)) {
    $element = array();
    if (!empty($allowed_settings['maxlength_setting'])) {
      $element['maxlength_js'] = array(
        '#type' => 'number',
        '#title' => t('Maxlength JS'),
        '#description' => t('The maximum length of the field in characters.'),
        '#default_value' => $plugin->getThirdPartySetting('maxlength', 'maxlength_js'),
      );
      $element['maxlength_js_label'] = array(
        '#type' => 'textarea',
        '#rows' => 2,
        '#title' => t('Summary count down message'),
        '#default_value' => $plugin->getThirdPartySetting('maxlength', 'maxlength_js_label', MAXLENGTH_DEFAULT_JS_LABEL),
        '#description' => t('The text used in the Javascript message under the input, where "@limit", "@remaining" and "@count" are replaced by the appropriate numbers.'),
      );
    }
    return $element;
  }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function maxlength_field_widget_settings_summary_alter(&$summary, $context) {
  $plugin_id = $context['widget']->getPluginId();
  $widget_settings = \Drupal::service('maxlength.widget_settings');
  $allowed_settings = $widget_settings->getAllowedSettings($plugin_id);
  if (!empty($allowed_settings)) {
    if (!empty($allowed_settings['maxlength_setting']) && $context['widget']->getThirdPartySetting('maxlength', 'maxlength_js')) {
      $summary [] = t('Maxlength JS - enabled: @count', array('@count' => $context['widget']->getThirdPartySetting('maxlength', 'maxlength_js')));
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function maxlength_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $thirdPartySettings = $context['widget']->getThirdPartySettings();
  if ( isset($thirdPartySettings['maxlength']['maxlength_js']) ) {
    $element['#maxlength_js'] = TRUE;
    $element['value']['#maxlength_js'] = TRUE;

    if (isset($thirdPartySettings['maxlength']['maxlength_js']) && $thirdPartySettings['maxlength']['maxlength_js'] > 0) {
      $maxlength_js = $thirdPartySettings['maxlength']['maxlength_js'];
      $element['value']['#attributes']['maxlength'] = $maxlength_js;
      $element['#attributes']['maxlength'] = $maxlength_js;

      $maxlength_js_label = !empty($thirdPartySettings['maxlength']['maxlength_js_label']) ? $thirdPartySettings['maxlength']['maxlength_js_label'] : MAXLENGTH_DEFAULT_JS_LABEL;
      $maxlength_js_label = t($maxlength_js_label);
      $element['#attributes']['maxlength_js_label'][] = $maxlength_js_label;
      $element['value']['#attributes']['maxlength_js_label'][] = $maxlength_js_label;

    }
  }

}

/**
 * Process handler for the form elements that can have maxlength attribute.
 * @param $element
 * @param $form_state
 * @return
 */
function maxlength_process_element($element, FormStateInterface $form_state) {
  if (isset($element['#maxlength_js_enforce']) && $element['#maxlength_js_enforce']) {
    $element['#attributes']['class'][] = 'maxlength_js_enforce';
  }
  return $element;
}

